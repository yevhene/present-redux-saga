<section>
  <h1>Redux Saga</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" href="https://github.com/yevhene/present-redux-saga">yevhene/present-redux-saga</a>
  </small>
</section>

<section>
  <h2>Redux Saga</h2>

  <section>
    <h3>Middleware</h3>

    <pre><code class="hljs" data-trim>
import { createStore, applyMiddleware } from 'redux'
import createSagaMiddleware from 'redux-saga'

import reducer from './reducers'
import mySaga from './sagas'

const sagaMiddleware = createSagaMiddleware()

const store = createStore(
  reducer,
  applyMiddleware(sagaMiddleware)
)

sagaMiddleware.run(mySaga)
    </code></pre>
  </section>

  <section>
    <h3>take</h3>

    <pre><code class="hljs" data-trim>
import { take } from 'redux-saga/effects'

// FETCH_USERS
function* fetchUsers(action) { ... }

// use them in parallel
export default function* rootSaga() {
  while (true) {
    yield take('FETCH_USERS', fetchUsers)
  }
}
    </code></pre>

    <p>Waits for event</p>
  </section>

  <section>
    <h3>takeEvery</h3>

    <pre><code class="hljs" data-trim>
import { takeEvery } from 'redux-saga/effects'

// FETCH_USERS
function* fetchUsers(action) { ... }

// CREATE_USER
function* createUser(action) { ... }

// use them in parallel
export default function* rootSaga() {
  yield takeEvery('FETCH_USERS', fetchUsers)
  yield takeEvery('CREATE_USER', createUser)
}
    </code></pre>

    <p>Takes every event and executes in parallel</p>
  </section>

  <section>
    <h3>takeLatest</h3>

    <pre><code class="hljs" data-trim>
import { takeLatest } from 'redux-saga/effects'

// FETCH_USERS
function* fetchUsers(action) { ... }

// use them in parallel
export default function* rootSaga() {
  yield takeLatest('FETCH_USERS', fetchUsers)
}
    </code></pre>

    <p>Takes only latest event. If another event dispatched, previous cancelled</p>
  </section>

  <section>
    <h3>put</h3>

    <pre><code class="hljs" data-trim>
import { put } from 'redux-saga/effects'

function* fetchProducts() {
  const products = yield Api.fetch('/products')
  // create and yield a dispatch Effect
  yield put({ type: 'PRODUCTS_RECEIVED', products })
}
    </code></pre>

    <p>Dispatch action</p>
  </section>

  <section>
    <h3>call</h3>

    <pre><code class="hljs" data-trim>
import { call, put } from 'redux-saga/effects'

function* fetchProducts() {
  const products = yield call(Api.fetch, '/products')
  // create and yield a dispatch Effect
  yield put({ type: 'PRODUCTS_RECEIVED', products })
}
    </code></pre>

    <pre><code class="hljs" data-trim>
{
  CALL: {
    fn: Api.fetch,
    args: ['./products']
  }
}
    </code></pre>

    <p>Easier to test. Also has <code>apply</code> similar function</p>
  </section>

  <section>
    <h3>all</h3>

    <pre><code class="hljs" data-trim>
import { call, put, all } from 'redux-saga/effects'

function* fetchProducts() {
  const [users, repos] = yield all([
    call(fetch, '/users'),
    call(fetch, '/repos')
  ])

  yield put(...)
}
    </code></pre>

    <p>Runs in parallel</p>
  </section>

  <section>
    <h3>race</h3>

    <pre><code class="hljs" data-trim>
import { race, take, put } from 'redux-saga/effects'
import { delay } from 'redux-saga'

function* fetchPostsWithTimeout() {
  const {posts, timeout} = yield race({
    posts: call(fetchApi, '/posts'),
    timeout: call(delay, 1000)
  })

  if (posts)
    put({type: 'POSTS_RECEIVED', posts})
  else
    put({type: 'TIMEOUT_ERROR'})
}
    </code></pre>

    <p>Runs in parallel but waits only first</p>
  </section>

  <section>
    <h3>select</h3>

    <pre><code class="hljs" data-trim>
import { call, put, select } from 'redux-saga/effects'

function* fetchProducts() {
  const state = yield select()
  const products = yield call(Api.fetch, '/products', state.session.token)
  yield put({ type: 'PRODUCTS_RECEIVED', products })
}
    </code></pre>

    <p>Fetches redux state</p>
  </section>

  <section>
    <h3>Error handling</h3>

    <pre><code class="hljs" data-trim>
import { call, put, select } from 'redux-saga/effects'

function* fetchProducts() {
  try {
    const products = yield call(Api.fetch, '/products', state.session.token)
    yield put({ type: 'PRODUCTS_RECEIVED', products })
  } catch (e) {
    yield put({ type: 'PRODUCTS_ERROR', e })
  }
}
    </code></pre>
  </section>

  <section>
    <h3>fork</h3>

    <pre><code class="hljs" data-trim>
function* fetchAll() {
  const task1 = yield fork(fetchResource, 'users')
  const task2 = yield fork(fetchResource, 'comments')
  yield call(delay, 1000)
}

function* fetchResource(resource) {
  const { data } = yield call(api.fetch, resource)
  yield put(...)
}

function* main() {
  try {
    yield call(fetchAll)
  } catch (e) {
    // handle fetchAll errors
  }
}
    </code></pre>

    <p>Attached forks</p>
  </section>

  <section>
    <h3>spawn</h3>

    <p>Detached fork. Like another root saga</p>
  </section>

  <section>
    <h3>cancel</h3>

    <pre><code class="hljs" data-trim>
function* fetchAll() {
  const task1 = yield fork(fetchResource, 'users')
  yield call(delay, 1000)
  yield cancel(task1)
}

function* fetchResource(resource) {
  const { data } = yield call(api.fetch, resource)
  if (!(yield cancelled())) {
    yield put(...)
  }
}

function* main() {
  try {
    yield call(fetchAll)
  } catch (e) {
    // handle fetchAll errors
  }
}
    </code></pre>
  </section>

  <section>
    <h3>eventChannel</h3>

    <pre><code class="hljs" data-trim>
import { eventChannel, END } from 'redux-saga'

function countdown(secs) {
  return eventChannel(emitter =&gt; {
      const iv = setInterval(() =&gt; {
        secs -= 1
        if (secs &gt; 0) {
          emitter(secs)
        } else {
          // this causes the channel to close
          emitter(END)
        }
      }, 1000);
      // The subscriber must return an unsubscribe function
      return () =&gt; {
        clearInterval(iv)
      }
    }
  )
}
    </code></pre>
  </section>

  <section>
    <h3>channel</h3>

    <pre><code class="hljs" data-trim>
export function* saga() {
  const chan = yield call(countdown, value)
  try {
    while (true) {
      // take(END) will cause the saga to terminate by jumping to the finally block
      let seconds = yield take(chan)
      console.log(`countdown: ${seconds}`)
    }
  } finally {
    console.log('countdown terminated')
  }
}
    </code></pre>
  </section>
</section>

<section>
  <h2>Questions?</h2>
</section>
